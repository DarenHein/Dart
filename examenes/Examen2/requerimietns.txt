¡Por supuesto! Aquí tienes un conjunto de 10 preguntas prácticas sobre Programación Orientada a Objetos (POO) en Dart. Puedes utilizar estas preguntas como un examen para evaluar tus conocimientos en Dart. Las respuestas están al final.

### Examen de Dart - Programación Orientada a Objetos (POO)

1. **Clases y Objetos**
   - Define una clase llamada `Persona` con propiedades como `nombre` y `edad`. Crea un objeto de esa clase llamado `persona1` con valores específicos y muestra en la consola el nombre y la edad.

2. **Herencia y Sobreescritura de Métodos**
   - Crea una clase base llamada `Figura` con un método `calcularArea()`. Luego, crea una clase derivada llamada `Circulo` que herede de `Figura` y sobrescribe el método para calcular el área de un círculo.

3. **Encapsulamiento**
   - Define una clase llamada `CuentaBancaria` con una propiedad privada llamada `saldo`. Implementa métodos públicos para depositar y retirar dinero de la cuenta, asegurándote de gestionar correctamente el saldo.

4. **Polimorfismo**
   - Crea una interfaz llamada `Sonido` con un método `hacerSonido()`. Luego, implementa la interfaz en las clases `Perro` y `Gato`. Crea instancias de ambas clases y muestra en la consola el sonido que hacen.

5. **Manejo de Excepciones**
   - Escribe un bloque de código que intente convertir una cadena a un número entero. Captura la excepción en caso de que la conversión falle e imprime un mensaje indicando que hubo un error.

6. **Colecciones en Dart**
   - Crea una lista de números y utiliza funciones de colecciones para encontrar el número máximo y la suma de todos los elementos.

7. **Constructores**
   - Define una clase `Automovil` con propiedades como `marca` y `modelo`. Implementa un constructor que acepte valores para estas propiedades al instanciar un objeto.

8. **Getters y Setters**
   - Mejora la clase `CuentaBancaria` del ejercicio 3, agregando un getter para obtener el saldo actual de la cuenta.

9. **Mixins**
   - Crea un mixin llamado `Registrable` que añada un método `registrar()` a una clase. Usa el mixin en una clase llamada `Usuario` para implementar la funcionalidad de registro.

10. **Principios SOLID**
    - Explica brevemente uno de los principios SOLID (por ejemplo, Principio de Responsabilidad Única) y cómo se aplica en el diseño de clases en Dart.

### Respuestas:

1. (Ejemplo de respuesta):
   ```dart
   class Persona {
     String nombre;
     int edad;

     Persona(this.nombre, this.edad);
   }

   void main() {
     var persona1 = Persona('Juan', 25);
     print('Nombre: ${persona1.nombre}, Edad: ${persona1.edad}');
   }
   ```

2. (Ejemplo de respuesta):
   ```dart
   class Figura {
     double calcularArea() {
       // Implementación base
     }
   }

   class Circulo extends Figura {
     double radio;

     Circulo(this.radio);

     @override
     double calcularArea() {
       return 3.14 * radio * radio;
     }
   }
   ```

Y así sucesivamente. ¡Espero que encuentres útil este examen!